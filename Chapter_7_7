import re
# Here, (Ha){3} matches 'HaHaHa' but not 'Ha'. Since it doesn’t match 'Ha',
# search() returns None.

txt = re.compile (r"(Ha){3}")
mo = txt.search ("HaHaHa")
print (mo.group())

mo2 = txt.search ("Ha")
print (mo2 == None)

"""
Python’s regular expressions are greedy by default, which means that in
ambiguous situations they will match the longest string possible. The nongreedy
version of the curly brackets, which matches the shortest string possible,
has the closing curly bracket followed by a question mark.
"""
import re

greedyHaRegex = re.compile(r'(Ha){3,5}')
mo1 = greedyHaRegex.search('HaHaHaHaHa')
print (mo1.group())
#o/p = HaHaHaHaHa
nongreedyHaRegex = re.compile(r'(Ha){3,5}?')
mo2 = nongreedyHaRegex.search('HaHaHaHaHa')
print (mo2.group())
#o/p = HaHaHa

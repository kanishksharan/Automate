"""
Project: Generating Random Quiz Files
Say you’re a geography teacher with 35 students in your class and you want
to give a pop quiz on US state capitals. Alas, your class has a few bad eggs in
it, and you can’t trust the students not to cheat. You’d like to randomize the
order of questions so that each quiz is unique, making it impossible for anyone
to crib answers from anyone else. Of course, doing this by hand would
be a lengthy and boring affair. Fortunately, you know some Python.
Here is what the program does:
• Creates 35 different quizzes.
• Creates 50 multiple-choice questions for each quiz, in random order.
• Provides the correct answer and three random wrong answers for each
question, in random order.
• Writes the quizzes to 35 text files.
• Writes the answer keys to 35 text files.
This means the code will need to do the following:
• Store the states and their capitals in a dictionary.
• Call open(), write(), and close() for the quiz and answer key text files.
• Use random.shuffle() to randomize the order of the questions and
multiple-
choice options.
"""

# The dictionary set

import random

capitals = {'Alabama': 'Montgomery', 'Alaska': 'Juneau', 'Arizona': 'Phoenix',
'Arkansas': 'Little Rock', 'California': 'Sacramento', 'Colorado': 'Denver',
'Connecticut': 'Hartford', 'Delaware': 'Dover', 'Florida': 'Tallahassee',
'Georgia': 'Atlanta', 'Hawaii': 'Honolulu', 'Idaho': 'Boise', 'Illinois':
'Springfield', 'Indiana': 'Indianapolis', 'Iowa': 'Des Moines', 'Kansas':
'Topeka', 'Kentucky': 'Frankfort', 'Louisiana': 'Baton Rouge', 'Maine':
'Augusta', 'Maryland': 'Annapolis', 'Massachusetts': 'Boston', 'Michigan':
'Lansing', 'Minnesota': 'Saint Paul', 'Mississippi': 'Jackson', 'Missouri':
'Jefferson City', 'Montana': 'Helena', 'Nebraska': 'Lincoln', 'Nevada':
'Carson City', 'New Hampshire': 'Concord', 'New Jersey': 'Trenton', 'New Mexico': 'Santa Fe', 'New York': 'Albany', 'North Carolina': 'Raleigh',
'North Dakota': 'Bismarck', 'Ohio': 'Columbus', 'Oklahoma': 'Oklahoma City',
'Oregon': 'Salem', 'Pennsylvania': 'Harrisburg', 'Rhode Island': 'Providence',
'South Carolina': 'Columbia', 'South Dakota': 'Pierre', 'Tennessee':
'Nashville', 'Texas': 'Austin', 'Utah': 'Salt Lake City', 'Vermont':
'Montpelier', 'Virginia': 'Richmond', 'Washington': 'Olympia', 'West Virginia': 'Charleston', 'Wisconsin': 'Madison', 'Wyoming': 'Cheyenne'}

for i in range (0,35):
    q_paper = open ("C:\\Python34\\Lab\\TestPaper_%d.txt"%(i+1),"w")
    a_paper = open ("C:\\Python34\\Lab\\AnsPaper_%d.txt"%(i+1),"w")

    # Start writing the columns in the q_paper
    q_paper.write ("Name: \n Date: \n Period: \n")
    q_paper.write (" "*(20)+" State Capitals Quiz (Form %d)"%(i+1))
    q_paper.write ("\n \n")

    # Keep the keys handy
    states = list(capitals.keys())
    # Shuffle the keys
    random.shuffle(states)

    # Now create answer keys
    for q in range (0,50):
        c_answer = capitals[states[q]]
        w_answer = list(capitals.values())
        del w_answer[w_answer.index(c_answer)] # Remove the correct answer from the list
        # pick any 3 wrong answer choices
        w_answer = random.sample (w_answer,3) # # wrong answer choices, 4th will be the correct answer choice
        # Wrong + correct answer choices
        a_choices = w_answer + [c_answer] # converting string to list form without individual disintegration**** Most important step
        # Now shuffle the answer choices
        random.shuffle (a_choices)
        # Finally write the contents of q_paper and a_paper onto the files
        q_paper.write ("%d. What is the capital of %s \n"%(q+1,states[q]))
        # print out the "ABCD" options
        for options in range (0,4):
            q_paper.write ("%s. %s \n"%("ABCD"[options],a_choices[options]))
        q_paper.write ("\n")

        # Now write the answer keys to answer file
        a_paper.write ("%d. %s \n"%(q+1,"ABCD"[a_choices.index(c_answer)]))
    
    q_paper.close()
    a_paper.close()
                                      
